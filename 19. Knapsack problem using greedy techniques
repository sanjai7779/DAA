def knapsack_greedy_fractional(values, weights, capacity):
    n = len(values)

    # Calculate the value-to-weight ratios for each item
    value_per_weight = [(values[i] / weights[i], i) for i in range(n)]

    # Sort items based on the value-to-weight ratios in descending order
    value_per_weight.sort(reverse=True)

    total_value = 0
    selected_items = [0] * n

    for ratio, i in value_per_weight:
        if weights[i] <= capacity:
            # If the whole item can be taken, take it
            total_value += values[i]
            selected_items[i] = 1
            capacity -= weights[i]
        else:
            # Otherwise, take a fraction of the item to fill the capacity
            fraction = capacity / weights[i]
            total_value += fraction * values[i]
            selected_items[i] = fraction
            break  # Knapsack is full

    return total_value, selected_items

# Example usage:
values = [60, 100, 120]
weights = [10, 20, 30]
knapsack_capacity = 50

result_value, result_items = knapsack_greedy_fractional(values, weights, knapsack_capacity)

print(f"Maximum value in the knapsack: {result_value}")
print("Selected items:")
for i, item in enumerate(result_items):
    print(f"Item {i+1}: {item:.2f} units")
